version: '3.9'
x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.1.1}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "true"
    AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"
    AIRFLOW__SMTP__SMTP_HOST: "smtp.gmail.com"
    AIRFLOW__SMTP__SMTP_PORT: 587
    AIRFLOW__SMTP__SMTP_USER: "de.airflow@gmail.com"
    AIRFLOW__SMTP__SMTP_PASSWORD: "cfsrvkongsobheta"
    AIRFLOW__SMTP__SMTP_MAIL_FROM: "de.airflow@gmail.com"

    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- pymongo}

    CLIENT_ID: ${CLIENT_ID}
    CLIENT_SECRET: ${CLIENT_SECRET}
    GRANT_TYPE: ${GRANT_TYPE}
    MONGO_INITDB_ROOT_USERNAME: root
    MONGO_INITDB_ROOT_PASSWORD: root
    MYSQL_DATABASE: lufthansadb
    MYSQL_ROOT_PASSWORD: root


  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./code:/opt/airflow/code
    - ./data/json:/opt/airflow/data/json

  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  main:
    container_name: main
    build:
      context: docker/
      dockerfile: ./Dockerfile
    command: python3 main.py
    volumes:
      - ./code:/app
      - ./logs:/logs
      - ./data/json:/data/json
    depends_on:
      - mongodb
      - mySqldb
    environment:
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
      - GRANT_TYPE=${GRANT_TYPE}
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MYSQL_DATABASE=lufthansadb
      - MYSQL_ROOT_PASSWORD=root

    healthcheck:
      test: ["CMD", "curl", "--fail", "http://lufthansa-airLines-sqldb:3306/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    

  api:
    container_name: api
    build: 
      context: docker/
      dockerfile: ./Dockerfile
      args:
        - CLIENT_ID
        - CLIENT_SECRET
        - GRANT_TYPE
    command: bash -c 'while !</dev/tcp/mySqldb/3306; do sleep 1; done; uvicorn --host 0.0.0.0  --reload --reload-dir /app api:api'
    volumes:
      - ./code:/app
      - ./logs:/logs
    expose:
      - 8000
    ports:
      - "8000:8000"
    depends_on:
      - main
      - mySqldb
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://lufthansa-airLines-sqldb:3306/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
     
  
  api_test:
    container_name: api_test
    build:
      context: docker/
      dockerfile: ./Dockerfile
    command: bash -c 'while !</dev/tcp/api/8000; do sleep 1; done; python3 api_test.py'
    volumes:
      - ./code:/app
      - ./logs:/logs
    depends_on:
      - api
    environment:
      - API_ADDRESS=api
      - API_PORT=8000
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://api:8000/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  dash:
    container_name: dashboard
    build:
      context: docker/
      dockerfile: ./Dockerfile
    command: bash -c 'while !</dev/tcp/mySqldb/3306; do sleep 1; done; python3 dashboard.py'
    volumes:
      - ./code:/app
    depends_on:
      - mySqldb
    expose:
      - 8050
    ports:
      - 8050:8050
    environment:
      - MYSQL_DATABASE=lufthansadb
      - MYSQL_ROOT_PASSWORD=root
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://lufthansa-airLines-sqldb:3306/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  mongodb:
    image : mongo:latest
    container_name: lufthansa-airLines-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    hostname: mongo-server
    ports:
      - 27017:27017
    volumes:
      - ./data/mongo-db:/data/db

  mySqldb:
    image : mysql:latest
    container_name: lufthansa-airLines-sqldb
    environment:
      - MYSQL_DATABASE=lufthansadb
      - MYSQL_ROOT_PASSWORD=root
    hostname: mysql-server
    ports:
      - 3306:3306
    volumes:
      - ./data/mysql-db:/var/lib/mysql

volumes:
  postgres-db-volume:







     